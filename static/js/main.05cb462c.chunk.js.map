{"version":3,"sources":["github.svg","stackoverflow.svg","QuesionsContainer.js","QuestionsNav.js","Questions.js","Credit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuesionsContainer","props","content","options","selectedAnswer","setSelectedAnswer","isAnswerCorrect","cNames","className","map","option","index","onClick","key","QuestionsNav","questions","questionIndex","setQuestionIndex","checkCorrect","setIsAnswerCorrect","hidden","finalAnswerString","length","Object","keys","question","shuffle","unshuffled","a","sort","Math","random","value","b","Questions","useState","setQuestions","correctAnswers","setCorrectAnswers","uri","useEffect","fetch","json","then","res","q","id","correctString","shuffledQuestions","catch","err","console","log","fetchData","style","display","flexDirection","alignItems","justifyContent","width","answerString","isCorrect","Credit","fontSize","href","src","stackoverflow","alt","github","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.05cb462c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.f380cb75.svg\";","module.exports = __webpack_public_path__ + \"static/media/stackoverflow.1c683041.svg\";","import React from \"react\";\n\nfunction QuesionsContainer(props) {\n  const {\n    content,\n    options,\n    selectedAnswer,\n    setSelectedAnswer,\n    isAnswerCorrect\n  } = props;\n\n  let cNames = \"\";\n\n  if (isAnswerCorrect === true) {\n    cNames = \"Rectangle RectangleCorrect\";\n  } else if (isAnswerCorrect === false) {\n    cNames = \"Rectangle RectangleWrong\";\n  }\n\n  return (\n    <div>\n      <h2>{content}</h2>\n      <div className=\"QuestionsContainer\">\n        {options.map((option, index) => {\n          return (\n            <button\n              onClick={() => {\n                // don't let user select another answer after revealing the correct answer\n                if (isAnswerCorrect != null) return;\n                setSelectedAnswer(index);\n              }}\n              key={option}\n              className={\n                index === selectedAnswer\n                  ? cNames || \"Rectangle RectangleSelect\"\n                  : \"Rectangle\"\n              }\n            >\n              <div className=\"ReactangleSmall OptionText Text\">{option}</div>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default QuesionsContainer;\n","import React from \"react\";\n\nfunction QuestionsNav(props) {\n  const {\n    questions,\n    selectedAnswer,\n    setSelectedAnswer,\n    questionIndex,\n    setQuestionIndex,\n    checkCorrect,\n    isAnswerCorrect,\n    setIsAnswerCorrect\n  } = props;\n  return (\n    <div>\n      <div>\n        <button\n          hidden={isAnswerCorrect != null}\n          onClick={() => {\n            if (selectedAnswer === null) return;\n            const finalAnswerString =\n              questions[questionIndex].options[selectedAnswer];\n            return selectedAnswer != null\n              ? checkCorrect(finalAnswerString)\n              : null;\n          }}\n          className={selectedAnswer != null ? \"okSelected\" : \"okButton\"}\n        >\n          <div className=\"ReactangleSmall okText Text\">OK</div>\n        </button>\n\n        <button\n          hidden={isAnswerCorrect === null}\n          className={selectedAnswer != null ? \"okSelected\" : \"okButton\"}\n          onClick={() => {\n            if (\n              isAnswerCorrect === null ||\n              questionIndex === questions.length - 1\n            )\n              return;\n            setQuestionIndex(questionIndex + 1);\n            setSelectedAnswer(null);\n            setIsAnswerCorrect(null);\n          }}\n        >\n          <div className=\"ReactangleSmall okText Text\">Continue</div>\n        </button>\n      </div>\n      <p>\n        <div className=\"row\">\n          {Object.keys(questions).map((question, index) => (\n            <div\n              key={index} // it's ok to use index here\n              className={\n                questionIndex === index ? \"circle circleCurrent\" : \"circle\"\n              }\n            ></div>\n          ))}\n        </div>\n      </p>\n    </div>\n  );\n}\n\nexport default QuestionsNav;\n","import React, { useState, useEffect } from \"react\";\nimport QuesionsContainer from \"./QuesionsContainer\";\nimport QuestionsNav from \"./QuestionsNav\";\n\nconst Questions = () => {\n  const [questions, setQuestions] = useState({});\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [correctAnswers, setCorrectAnswers] = useState({});\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);\n\n  const checkCorrect = answerString => {\n    const isCorrect =\n      correctAnswers[questionIndex].correctString === answerString;\n    setIsAnswerCorrect(isCorrect);\n  };\n\n  const uri =\n    \"https://my-json-server.typicode.com/barhoring/fake-server/questions\";\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(uri);\n      res\n        .json()\n        .then(res => {\n          setCorrectAnswers(\n            res.map(q => {\n              return { id: q.id, correctString: q.options[0] };\n            })\n          );\n          let shuffledQuestions = res.map(question => {\n            let { options } = question;\n            options = shuffle(options);\n            question.options = options;\n            return question;\n          });\n          setQuestions(shuffledQuestions);\n        })\n        .catch(err => console.log(err));\n    }\n\n    fetchData();\n  }, []); // [] means the shuffle will occur for every refresh\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"80%\"\n        // border: \"solid\"\n      }}\n    >\n      {Object.keys(questions).length > 0 ? (\n        <QuesionsContainer\n          {...questions[questionIndex]}\n          selectedAnswer={selectedAnswer}\n          setSelectedAnswer={setSelectedAnswer}\n          isAnswerCorrect={isAnswerCorrect}\n        />\n      ) : null}\n\n      <p>\n        <QuestionsNav\n          questions={questions}\n          selectedAnswer={selectedAnswer}\n          setSelectedAnswer={setSelectedAnswer}\n          questionIndex={questionIndex}\n          setQuestionIndex={setQuestionIndex}\n          checkCorrect={checkCorrect}\n          isAnswerCorrect={isAnswerCorrect}\n          setIsAnswerCorrect={setIsAnswerCorrect}\n        />\n      </p>\n    </div>\n  );\n};\n\nconst shuffle = unshuffled => {\n  return unshuffled\n    .map(a => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(a => a.value);\n};\n\nexport default Questions;\n","import React from \"react\";\n\nimport github from \"./github.svg\";\nimport stackoverflow from \"./stackoverflow.svg\";\n\nconst Credit = () => {\n  return (\n    <div>\n      <div style={{ fontSize: \"17px\" }}>Created by Bar Horing Amir</div>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <a href=\"https://stackoverflow.com/users/6683217/bar-horing\">\n          <img src={stackoverflow} className=\"creditIcon\" alt=\"stackoverflow\" />\n        </a>\n        <a href=\"https://github.com/barhoring\">\n          <img src={github} className=\"creditIcon\" alt=\"github\" />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Credit;\n","import React from \"react\";\nimport Questions from \"./Questions\";\nimport Credit from \"./Credit\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Questions />\n      <Credit />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}